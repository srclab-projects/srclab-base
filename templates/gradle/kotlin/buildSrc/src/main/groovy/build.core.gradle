import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
  id 'build.repositories'
}

final ThreadLocal<Project> localProject = ThreadLocal.withInitial { project }

static boolean isEnable(Object value) {
  if (value == null) {
    return false
  }
  if (value instanceof Boolean) {
    return value
  }
  String valueToString = value.toString().trim()
  return valueToString.equalsIgnoreCase("true") ||
    valueToString.equalsIgnoreCase("yes") ||
    valueToString.equalsIgnoreCase("enbale") ||
    valueToString.equalsIgnoreCase("1") ||
    valueToString.equalsIgnoreCase("t") ||
    valueToString.equalsIgnoreCase("open")
}

static String currentGradleDirectoryPath(buildscript) {
  java.nio.file.Path sourcePath = buildscript.sourceFile.toPath()
  def parent = sourcePath.getParent()
  return parent.toString() + File.separator
}

static String readFileAsString(String path, String charset) {
  return new String(Files.readAllBytes(
    Paths.get(path)
  ), charset)
}

static void writeBuildInfos(Project project, String relativePath) {
  Map<String, String> properties = new LinkedHashMap<>()
  properties.put("build.version", project.version.toString())
  StringBuilder buffer = new StringBuilder()
  properties.forEach() { k, v ->
    buffer.append(k).append("=").append(v)
  }
  Files.write(Paths.get(project.projectDir.path, relativePath), buffer.toString().getBytes(StandardCharsets.UTF_8))
}

ext["utils"] = [
  isEnable                  : this.&isEnable,
  currentGradleDirectoryPath: this.&currentGradleDirectoryPath,
  readFileAsString          : this.&readFileAsString,
  writeBuildInfos           : this.&writeBuildInfos,
]

class Printer {

  private final ThreadLocal<Project> localProject
  private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss.SSS")

  Printer(ThreadLocal<Project> localProject) {
    this.localProject = localProject
  }

  def info(message) {
    int logLevel = localProject.get().configs.logLevel
    if (logLevel > 100) {
      return
    }
    out("info: $message")
  }

  def debug(message) {
    int logLevel = localProject.get().configs.logLevel
    if (logLevel > 50) {
      return
    }
    out("debug: $message")
  }

  private void out(String message) {
    println(">> ${LocalDateTime.now().format(dateTimeFormatter)} $message")
  }
}

ext["printer"] = new Printer(localProject)